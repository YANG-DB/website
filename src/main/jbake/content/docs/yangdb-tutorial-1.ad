////
 * Copyright (C) 2016 - 2019 yangdb   ------ www.yangdb.org ------
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
////
= Tutorial 1
:jbake-type: page
:jbake-tags: Tutorial-1
:jbake-status: published
:idprefix:

== Knowledge Assembly Flavor

=== Agenda
In this tutorial we will learn to initiate the elasticsearch DB with _Knowledge_ ontology and load the LesMiserables graph.
After loading the graph we will use some simple cypher graph queries and view the results.

Before starting the YangDb Engine (via Docker) link:../docker.html[docker] the access to elasticsearch has to be configured correctly.

=== Configuration
 - Elasticsearch (these default value are configured for test purpose):

        (1) elasticsearch.embedded = true
        (2) elasticsearch.delete_data_on_load = false
        (3) elasticsearch.hosts = [ "localhost" ]
        (4) elasticsearch.port = 9300
        (5) elasticsearch.cluster_name = Dragons

1: *elasticsearch.embedded* - Allows running elsticsearch in process for test purposes

2: *elasticsearch.delete_data_on_load* - For test purposes, while starting the in process elasticsearch allows the cleaning of prior test information

3: *elasticsearch.hosts* - determines the hosts (singular or plural) of the elasticsearch

4: *elasticsearch.port* - determines the TCP port of the elasticsearch

5: *elasticsearch.cluster_name* - determines the cluster name port of the elasticsearch cluster

Once the elasticsearch configuration is ready, the engine can be started...
See complete 'knowledge' configuration assembly file link:../knowledge/config/application.conf[application.conf]

=== Starting the Engine
Once the engine has started - please open the swagger API page file link:http://localhost:8888/swagger[swagger]

image:../img/manual/swagger-API.png[swagger-API]

YangDb (AKA Fuse) has many API call for different purposes see link:yangdb-api.ad[API]

=== 1.Init Tables
image:../img/manual/load-api.png[Load-API]
The call to http://localhost:8888/fuse/load/ontology/knowledge/init will do:
 - create the physical knowledge ontology mapping templates
 - create the ontology indices

Once the indices where created, we need to create the Id Sequencer table and initiate its values:

==== response
    {
        "requestId": "FR372566762169892864",
        "elapsed": "00007698",
        "renderElapsed": "00000122",
        "totalElapsed": "00007820",
        "data": "indices created:44"
    }

=== 2.Init Id Sequences
image:../img/manual/manage-api.png[Manage-API]
The call to "http://localhost:8888/fuse/idgen/init?names=Entity,Relation,Evalue,Rvalue,workerId" will create and initialize the next sequencers:

 - Entity -   entity Id sequencer
 - Relation - relation Id sequencer
 - Evalue -   entity values (properties) Id sequencer
 - Rvalue -   relation values (properties) Id sequencer
 - workerId - YangDb driver Id sequencer


=== 3. Load Logical Ontology
image:../img/manual/catalog-api.png[Catalog-API]

We need to upload the logical _LesMiserables.json_ ontology link:../knowledge/ontology/LesMiserables.json[LesMiserables]
Ths logical ontology will help us ask logical queries using the logical business elements rather then the lower level physical _Knowledge_ ontology link:../knowledge/ontology/Knowledge.json[Knowledge]
As we recall, the _Knowledge_ ontology is the lower level RDF dynamic schema structure.

=== 4. Load LesMiserables Graph
image:../img/manual/load-api.png[Load-API]

The next API http://localhost:8888/fuse/load/ontology/Knowledge/load?directive=INSERT will be used to upload the LesMiserables.json graph link:../knowledge/data/LogicalGraph.json[LesMiserables]

Once the load phase was complete we will see the

The response shows the generated Id's and reports the different phases the load has been proccesses:

 - Transform Graph to General purpose Element
 - ElasticSearch commit documents

==== response
    {
    "requestId": "FR372567560375304192",
    "elapsed": "00002793",
    "renderElapsed": "00000015",
    "totalElapsed": "00002808",
    "data": {
    "responses": [
        {
            "failures": [],
            "index": "entity",
            "successes": [
                "e00000001.default",
                    ...
                "r00000254.out"
            ]
        },
        {
            "failures": [],
            "successes": []
        },
        {
            "failures": [],
            "index": "entity",
            "successes": [
                "ev00000001",
                ....
                "ev00000077"
        ]},
        {
            "failures": [],
            "index": "relation",
            "successes": [
                "r00000002",
                "r00000001",
                ....
                "r00000254"
        ]
        },
        {
            "failures": [],
            "successes": []
        },
      {
        "failures": [],
        "index": "logicalTransformation",
        "successes": [
            "Entities:77",
            "Relations:254",
            "eValues:77",
            "rValues:0"
            ]
      }]
    }
}

=== 4. Query the data
image:../img/manual/query-api.png[Query-API]

We will want to get all the people who know other people where the first people are named Napoleon
Cypher query :  _Match (p:Person)-[knows:knows]->(p2:Person) Where (p.name = "Napoleon") Return *_

The query logical ontology name will be the one we uploaded in step 3 (LesMiserables)

The response will be be of a Graph projection containing a list of nodes and edges:

=== response
Response contains the next details: link:../knowledge/response/query-response.json[response]

 - Query Resource
 - Cursor Resource
 - Page Resource
 - Result Graph

