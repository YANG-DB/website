////
 * Copyright (C) 2016 - 2019 yangdb   ------ www.yangdb.org ------
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
////
=  custom-ontology
:jbake-type: page
:jbake-tags: custom-ontology
:jbake-status: published
:idprefix:

== Different flavors

As we've seen before, YangDb comes with 2 different flavors for general usage:

.Knowledge Graph Schema
RDF based agile schema with a dynamic for schema changes during usage.

.Custom Graph Schema
Custom schema with a static indices mapping - where each logical graph element has a corresponding index (or nested index) .

=== Ontology
In computer science and information science, an ontology encompasses a representation, formal naming and definition of the categories, properties and relations between the concepts, data and entities that substantiate one, many or all domains of discourse.


==== A Song of Ice & File
Lets consider the next ontology logical taken from the fictional domain:

'''
.Ice & Fire Ontology
Ice & Fire Ontology reference : link:/knowledge-ontology.html[ontology page]

=== Custom Physical Documents
image::img/property-graph-dragons.png[index structure]

.Entity
As seen in the image above, the _entity_  index contains all the documents related to the
logical entity representation including the value documents and their coresponding hasValue documents
that materialize this relation.


.Relation
Same goes for the _Relation_  index contains all the documents related to the
logical relationship representation including the value documents and their coresponding hasValue documents
that materialize this relation.
As you may expect the relation document contains information regarding the type and id of both sides of the relation.

==== Logical Ontology DSL
A DSL - Domain Specific Language is a business language used for describing the actual interactions between the logical components of the graph.
As opposed to the physical ontology that describes the low lever documents materialization in the storage layter - elasticsearch documents,
The logical ontology 'talks' in logical terms and allow us to create a simple query language that hides the storage complexity level.

==== Example logical query
image::img/v1-query.png[v1-dragon-freezes]
The Above query image represent a pattern query that has to match a dragon named 'Balerion'
that any freezes dragons from date 1010 A.C and the frozen time took less than 10 minutes.

The existance of a logical DSL language simplifies the way we define queries and cleanly seperates the
Physical storage concerns from the logical ones.